%% Using Sinc^2
Ts = 0.1;
dt = 0.01;
fs = 1/dt;
period = 0.1/fs;
f = [0:fs/41:fs-fs/41]; % Made frequency vector of size 41

w10 = 2*pi*10; % 10 Hz
w20 = 2*pi*20; % 20 Hz
w30 = 2*pi*30;

t = -2*Ts:dt:2*Ts;

z = sinc(0.25*t/Ts).^2.*exp(w30*i.*t);
y = sinc(0.25*t/Ts).^2.*exp(w20*i.* t);  % 20Hz shift or it least it should be
x = sinc(0.25*t/Ts).^2.* exp(w10*i.* t);  % 10Hz shift or it least it should be

u = x+y+z; % Combine into one plot

tri = fft(x); % individual fft and combined fft
tri2 = fft(y);
tri3 = fft(z);

U = fft(u);

figure
subplot(3,1,1)
title("Sinc^2 vs Sinc")
plot(t,x);
xlabel("Time (s)")
ylabel("Amplitude")
legend("Sinc (10Hz)")

subplot(3,1,2)
plot(t,y);
xlabel("Time (s)")
ylabel("Amplitude")
legend("Sinc (20Hz)")

subplot(3,1,3)
plot(t,z)
xlabel("Time (s)")
ylabel("Amplitude")
legend("Sinc (30Hz)")

figure
title("Pulse shapes in frequency")
plot(f,abs(tri))
hold on
plot(f,abs(tri2))
plot(f,abs(tri3))
xlabel("Frequency (Hz)")
ylabel("Amplitude")

legend("Triangle","rec")

figure
title("Combined fft into one plot")
plot(f,abs(U))
xlabel("Frequency (Hz)")
ylabel("Amplitude")
%% Use Sinc
Ts = 0.1;
dt = 0.005;
fs = 1/dt;

f = [0:fs/81:fs-fs/81];
t = -2*Ts:dt:2*Ts;

a = sinc(t/Ts).*exp(w10*i.*t);
b = sinc(t/Ts).*exp(w20*i.* t);
c = sinc(t/Ts).* exp(w30*i.* t);

u = a+b+c; % Combine into one plot

rec = fft(a); % individual fft and combined fft
rec2 = fft(b);
rec3 = fft(c);

U = fft(u);

figure
subplot(3,1,1)
title("Sinc^2 vs Sinc")
plot(t,a);
xlabel("Time (s)")
ylabel("Amplitude")
legend("Sinc (10Hz)")

subplot(3,1,2)
plot(t,b);
xlabel("Time (s)")
ylabel("Amplitude")
legend("Sinc (20Hz)")

subplot(3,1,3)
plot(t,c)
xlabel("Time (s)")
ylabel("Amplitude")
legend("Sinc (30Hz)")

figure
title("Pulse shapes in frequency")
plot(f,abs(rec))
hold on
plot(f,abs(rec2))
plot(f,abs(rec3))
xlabel("Frequency (Hz)")
ylabel("Amplitude")


figure
title("Combined fft into one plot")
plot(f,abs(U))
xlabel("Frequency (Hz)")
ylabel("Amplitude")

%% Up Convert

w = 2*pi*10;
w2 = 2*pi*20;
w3 = 2*pi*30;
%-shuafrom here down
up_a = cos(w*t).*a;
up_b = cos(w2*t).*b;
up_c = cos(w3*t).*c;

up_all = up_a + up_b + up_c; % Combined pulses being up converted

up_rec = fft(up_a); % individual fft and combined fft
up_rec2 = fft(up_b);
up_rec3 = fft(up_c);

up_recU = fft(up_all);

figure
subplot(3,1,1)
title("Sinc^2 vs Sinc")
plot(t,up_a);
xlabel("Time (s)")
ylabel("Amplitude")
legend("Sinc (10Hz)")

subplot(3,1,2)
plot(t,up_b);
xlabel("Time (s)")
ylabel("Amplitude")
legend("Sinc (20Hz)")

subplot(3,1,3)
plot(t,up_c)
xlabel("Time (s)")
ylabel("Amplitude")
legend("Sinc (30Hz)")

figure
subplot(3,1,1)
title("pulse in freq")
plot(f,abs(up_rec));
xlabel("Frequency sinc 10(Hz)")
ylabel("Amplitude")

legend("Rectangle")

subplot(3,1,2)
plot(f,abs(up_rec2));
xlabel("Frequency sinc 20(Hz)")
ylabel("Amplitude")

legend("Rectangle","rec")
subplot(3,1,3)
plot(f,abs(up_rec3))
xlabel("Frequency sinc 30(Hz)")
ylabel("Amplitude")

legend("Rectangle","rec")

figure
plot(f,abs(up_recU)), title("All combined") % This looks wrong asf
xlabel("Frequency (Hz)")
ylabel("Amplitude")

legend("Rectangle")



%% Create Message
% - Recent changes here
N = 5; % Number of bits
len = 81; % length of sinc plots
t = 0:dt:Ts*4*N;



x_n = bitRate(1);

message = 'I love ESE 351! :)';
binary = str2num(reshape(dec2bin(message)',1,[])');
x_message = binaryConvert(binary);

newLength = numel(x_message) * (len-1);

newArray = zeros(1, newLength);

for i = 1:numel(x_message)
    newArray((i - 1) * (len-1) + 1) = x_message(i);
end

x_message = newArray;  %Binary array representing text, with same bitrate as x_n


figure
stem(0:dt:Ts*4*(N-1) ,x_n), title("Random Values Between [-1,1]");
xlabel("Time(s)")


messageA = conv(x_n, up_rec);  % Create individual signals with each sinc function
messageB = conv(x_n, up_rec2);
messageC = conv(x_n, up_rec3);
messageU = messageA + messageB + messageC;

checkA = correc(1, messageA); % Hold on to correct values to compare later
checkB = correc(1, messageB);
checkC = correc(1, messageC);
checkU = correc(1, messageU);

% figure
% plot(t, messageA), title("Message A") % Show original msg
% xlabel("Time(s)")
%
% figure
% plot(t, messageB), title("Message B") % Show original msg
% xlabel("Time(s)")
%
% figure
% plot(t, messageC), title("Message C") % Show original msg
% xlabel("Time(s)")

figure
plot(t, messageU), title("Message U") % Show original msg
xlabel("Time(s)")
%% noise

N = 5;

sigma = 1;  % Arbitrary Val. was changed for different coefficients

noise = sigma * randn(1,length(messageA));

noise_sigA = noise + messageA; % This message is made up of the three pulse shapes at 10,20,30Hz respectively
noise_sigB = noise + messageB;
noise_sigC = noise + messageC;
noise_sigU = noise_sigA + noise_sigB + noise_sigC;


figure
plot(t, messageU), title("Noise-Free Message (All)")
xlabel("Time(s)")
ylabel("Amplitude")

figure
plot(t, noise_sigU), title("Noisy Message (All)")
xlabel("Time(s)")
ylabel("Amplitude")


% figure
% stem(t, messageA), title("Noise-Free Message b (1/2*Ts)")
% xlabel("Time(s)")
% ylabel("Amplitude")
%
% figure
% stem(t, up_b), title("Noise-Free Message b (1/2*Ts)")
% xlabel("Time(s)")
% ylabel("Amplitude")
%
% figure
% plot(t, noise_sig2), title("Noisy Message B (1/2*Ts)")
% xlabel("Time(s)")
% ylabel("Amplitude")
%
% figure
% stem(t, up_c), title("Noise-Free Message C (1/2*Ts)")
% xlabel("Time(s)")
% ylabel("Amplitude")
%
% figure
% plot(t, noise_sig3), title("Noisy Message C (1/2*Ts)")
% xlabel("Time(s)")
% ylabel("Amplitude")


%% Down Convert and Analyze (Assuming past code work and is right)

% Signed based match
downMsgA = noise_sigA .* cos(w*t);
compareA = signBased(downMsgA, 1);

downMsgB = noise_sigB .* cos(w2*t);
compareB = signBased(downMsgB, 1);

downMsgC = noise_sigC .* cos(w3*t);
compareC = signBased(downMsgC, 1);

compareU = (compareA + compareB + compareC) /3;

downMsgU = downMsgC + downMsgA + downMsgB;

% figure
% stem(t,compareA), title("Check A");
% hold on
% stem(t, checkA);
% 
% figure
% stem(t,compareB), title("Check B");
% hold on
% stem(t, checkB), title("Check C");
% 
% figure
% stem(t,compareC);
% hold on
% stem(t, checkC);

figure 
stem(t, compareU)
hold on
stem(t, checkU)

%%

% Matched Filter Received

downMsgA = conv(downMsgA, a, "same");
downMsgB = conv(downMsgB, b, "same");
downMsgC = conv(downMsgC, c, "same");
downMsgU = conv(downMsgU, u, "same");

figure 
plot(t,downMsgU)
%%
compareU = signBased(downMsgU,1);

figure 
stem(t,compareU)




%% Functions Used

function [x_n] = bitRate(x)
N = 5;
len = 81;

range = 0:(len - 1)/x: (N-1) * len;
x_n = zeros(1,len * (N-1) - (N-1));

for n = 1:(len - 1)/x:(N-1) * len
    x_n(n) = 2 * ((rand(1,1)>0.5)-0.5);
end

end

function [signBasedFilter] = signBased(noise_sig, x)
signBasedFilter = zeros(size(noise_sig));

for i = 1:80:size(noise_sig,2)
    if (noise_sig(i) > 0)
        signBasedFilter(i) = 1;
    end
    if (noise_sig(i) < 0)
        signBasedFilter(i) = -1;
    end
end
end

function [correct] = correc(x, message)
correct = zeros(size(message));

for i = 1:size(message,2)/x:size(message,2)
    if (message(i) > 0)
        correct(i) = 1;
    end
    if (message(i) < 0)
        correct(i) = 0;
    end
end
end

function [matchedFilter] = matched(matchedFilter_Conv, x)

matchedFilter = zeros(1,size(matchedFilter_Conv,2));

for i = 1:size(matchedFilter_Cov,2)/x:(size(matchedFilter_Conv,2) - 1)
    if (matchedFilter_Conv(i) > 0)
        matchedFilter(i) = 1;
    end
    if (matchedFilter_Conv(i) < 0)
        matchedFilter(i) = -1;
    end
end
end

function [newBinary] = binaryConvert(binary)

for i=1:length(binary)
    if (binary(i)==0)
        binary(i) = -1;
    end
end

newBinary = binary;

end





