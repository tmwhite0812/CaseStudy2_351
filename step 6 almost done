%% Using Sinc^2
Ts = 0.1;
dt = 0.01;
fs = 1/dt;
period = 0.1/fs;
f = [0:fs/41:fs-fs/41]; % Made frequency vector of size 41


t = -2*Ts:dt:2*Ts;


z = sinc(t/Ts);
y = z;
x = z;




u = x+y+z; % Combine into one plot

tri = fft(x); % individual fft 


figure
title("Sinc^2")
plot(t,x);
xlabel("Time (s)")
ylabel("Amplitude")
legend("Sinc")


figure
title("Pulse shapes in frequency")
plot(f,abs(tri))
xlabel("Frequency (Hz)")
ylabel("Amplitude")

legend("Triangle")

%% Use Sinc
Ts = 0.1;
dt = 0.005;
fs = 1/dt;

f = [0:fs/81:fs-fs/81];
t = -2*Ts:dt:2*Ts;

a = sinc(t/Ts);
b = a;
c = a;

rec = fft(a); % individual fft 


figure
plot(t,a), title("Sinc");
xlabel("Time (s)")
ylabel("Amplitude")
legend("Sinc")



figure
title("Pulse shapes in frequency")
plot(f,abs(rec))
xlabel("Frequency (Hz)")
ylabel("Amplitude")



%% Up Convert

w = 2*pi*10;
w2 = 2*pi*20;
w3 = 2*pi*30;

up_a = cos(w*t).*a;
up_b = cos(w2*t).*b;
up_c = cos(w3*t).*c;



up_all = up_a + up_b + up_c; % Combined pulses being up converted

up_rec = fft(up_a); % individual fft and combined fft
up_rec2 = fft(up_b);
up_rec3 = fft(up_c);

up_recU = fft(up_all);

figure
subplot(3,1,1)
title("Sinc^2 vs Sinc")
plot(t,up_a);
xlabel("Time (s)")
ylabel("Amplitude")
legend("Sinc (10Hz)")

subplot(3,1,2)
plot(t,up_b);
xlabel("Time (s)")
ylabel("Amplitude")
legend("Sinc (20Hz)")

subplot(3,1,3)
plot(t,up_c)
xlabel("Time (s)")
ylabel("Amplitude")
legend("Sinc (30Hz)")

figure
subplot(3,1,1)
title("pulse in freq")
plot(f,abs(up_rec));
xlabel("Frequency sinc 10(Hz)")
ylabel("Amplitude")
legend("Rectangle")

subplot(3,1,2)
plot(f,abs(up_rec2));
xlabel("Frequency sinc 20(Hz)")
ylabel("Amplitude")
legend("Rectangle")

subplot(3,1,3)
plot(f,abs(up_rec3))
xlabel("Frequency sinc 30(Hz)")
ylabel("Amplitude")
legend("Rectangle")

figure
plot(f,abs(up_recU)), title("All combined") % This looks wrong asf
xlabel("Frequency (Hz)")
ylabel("Amplitude")
legend("Rectangle")



%% Create Message
% - Recent changes here
N = 5; % Number of bits
len = 81; % length of sinc plots
t = 0:dt:Ts*4*N;

t_msg = 0:dt:Ts*4*127;

x_n = bitRate(1);

message = 'I love ESE 351! :)';
binary = str2num(reshape(dec2bin(message)',1,[])');
x_message = binaryConvert(binary);

newLength = numel(x_message) * (len-1);

newArray = zeros(1, newLength);

for i = 1:numel(x_message)
    newArray((i - 1) * (len-1) + 1) = x_message(i);
end

x_message = newArray;  %Binary array representing text, with same bitrate as x_n
x_message = [x_message, 0];

figure 
stem(0:dt:Ts*4*126,x_message), title("Bits of inputed message");
xlabel("Time(s)")


figure
stem(0:dt:Ts*4*(N-1) ,x_n), title("Random Values Between [-1,1]");
xlabel("Time(s)")


messageA = conv(up_rec, x_n);  % Create individual signals with each sinc function
messageB = conv(up_rec2, x_n);
messageC = conv(up_rec3, x_n);
messageU = messageA + messageB + messageC;
checkU =  correc(1,messageU);

msgA = conv(up_rec, x_message);
msgB = conv(up_rec2, x_message);
msgC = conv(up_rec3, x_message);
msg = msgA + msgB + msgC;


figure
plot(t, messageU), title("Message U") % Show original msg
xlabel("Time(s)")
%% noise

N = 5;

sigma = 1;  % Arbitrary Val. was changed for different coefficients

noise = sigma * randn(1,length(messageA));
noise_msg = sigma * randn(1,length(msgA));

noise_sigA = noise + messageA; % This message is made up of the three pulse shapes at 10,20,30Hz respectively
noise_sigB = noise + messageB;
noise_sigC = noise + messageC;
noise_sigU = noise_sigA + noise_sigB + noise_sigC;

msgNoiseA = noise_msg + msgA;
msgNoiseB = noise_msg + msgB;
msgNoiseC = noise_msg + msgB;
msgNoise = msgNoiseA + msgNoiseB + msgNoiseC;

figure
plot(t, messageU), title("Noise-Free Message (All)")
xlabel("Time(s)")
ylabel("Amplitude")

figure
plot(t, noise_sigU), title("Noisy Message (All)")
xlabel("Time(s)")
ylabel("Amplitude")


figure
plot(t_msg, msg), title("Noise-Free of Input Message")
xlabel("Time(s)")
ylabel("Amplitude")

figure
plot(t_msg, msgNoise), title("Noisy Message of Input Message")
xlabel("Time(s)")
ylabel("Amplitude")

% figure
% stem(t, messageA), title("Noise-Free Message b (1/2*Ts)")
% xlabel("Time(s)")
% ylabel("Amplitude")
%
% figure
% stem(t, up_b), title("Noise-Free Message b (1/2*Ts)")
% xlabel("Time(s)")
% ylabel("Amplitude")
%
% figure
% plot(t, noise_sig2), title("Noisy Message B (1/2*Ts)")
% xlabel("Time(s)")
% ylabel("Amplitude")
%
% figure
% stem(t, up_c), title("Noise-Free Message C (1/2*Ts)")
% xlabel("Time(s)")
% ylabel("Amplitude")
%
% figure
% plot(t, noise_sig3), title("Noisy Message C (1/2*Ts)")
% xlabel("Time(s)")
% ylabel("Amplitude")


%% Down Convert and Analyze (Assuming past code work and is right)

% Signed based match
downMsgA = noise_sigA .* cos(w*t);

downMsgB = noise_sigB .* cos(w2*t);

downMsgC = noise_sigC .* cos(w3*t);

downMsgU = downMsgC + downMsgA + downMsgB;


downRealA =  msgNoiseA .* cos(w*t_msg); % Input message down conversion

downRealB = msgNoiseB .* cos(w2*t_msg);

downRealC = msgNoiseC .* cos(w3*t_msg);

downReal = downRealA + downRealB + downRealC;

% Matched Filter Received

downMsgA = conv(downMsgA, a, "same");
downMsgB = conv(downMsgB, b, "same");
downMsgC = conv(downMsgC, c, "same");
downMsgU = conv(downMsgU, u, "same");

downRealA = conv(downRealA, a, "same");
downRealB = conv(downRealB, b, "same");
downRealC = conv(downRealC, c, "same");
downReal = conv(downReal, u, "same");

figure 
plot(t,downMsgU), title("Down Converted")


figure
plot(t_msg,downReal), title("Down converted actual message")
%%
compareU = signBased(downMsgU,1);

compareReal = signBased(downReal,1);

binaryOut = getBinary(compareReal, length(binary));
binaryOut = binaryOut(1:end-1);


messageOut = char(bin2dec(num2str(reshape(binaryOut,7,[])')))';

figure 
stem(t,compareU, 'red')
hold on
stem(t, checkU, 'green')

legend("Wrong", "Correct")



figure 
stem(t_msg,compareReal, 'red')
hold on

legend("Wrong", "Correct")


%% Functions Used

function [x_n] = bitRate(x)
N = 5;
len = 81;

x_n = zeros(1,len * (N-1) - (N-1));

for n = 1:(len - 1)/x:(N-1) * len
    x_n(n) = 2 * ((rand(1,1)>0.5)-0.5);
end

end

function [signBasedFilter] = signBased(noise_sig, x)
signBasedFilter = zeros(size(noise_sig));

for i = 1:80:size(noise_sig,2) - 1
    if (noise_sig(i) > 0)
        signBasedFilter(i) = 1;
    end
    if (noise_sig(i) < 0)
        signBasedFilter(i) = -1;
    end
end
end

function [correct] = correc(x, message)
correct = zeros(size(message));

for i = 1:80/x:size(message,2) -1 
    if (message(i) > 0)
        correct(i) = 1;
    end
    if (message(i) < 0)
        correct(i) = -1;
    end
end
end

function [matchedFilter] = matched(matchedFilter_Conv, x)

matchedFilter = zeros(1,size(matchedFilter_Conv,2));

for i = 1:size(matchedFilter_Cov,2)/x:(size(matchedFilter_Conv,2) - 1)
    if (matchedFilter_Conv(i) > 0)
        matchedFilter(i) = 1;
    end
    if (matchedFilter_Conv(i) < 0)
        matchedFilter(i) = -1;
    end
end
end

function [newBinary] = binaryConvert(binary)

for i=1:length(binary)
    if (binary(i)==0)
        binary(i) = -1;
    end
end

newBinary = binary;

end

function [binary] = getBinary(longArray, leng)

binary = zeros(leng, 1);
j = 1;

for i=1:length(longArray)
    if(longArray(i)==1)
        binary(j) = 1;
        j = j+1;
    end
    if(longArray(i)==-1)
        binary(j) = 0;
        j=j+1;
    end
end
end
        




